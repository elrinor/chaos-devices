// $ANTLR : "oberon.g" -> "Oberon2Scanner.java"$

package ru.msu.cmc.sp.oberon;
import java.util.*;
import antlr.SemanticException;

public interface Oberon2ScannerTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int STAR = 4;
	int DOT = 5;
	int EQUAL = 6;
	int COMMA = 7;
	int SEMICOLON = 8;
	int LPAREN = 9;
	int RPAREN = 10;
	int COLON = 11;
	int DOTDOT = 12;
	int LBR = 13;
	int RBR = 14;
	int REF = 15;
	int LBRACE = 16;
	int RBRACE = 17;
	int NEQUAL = 18;
	int LESS = 19;
	int LEQ = 20;
	int GREATER = 21;
	int GEQ = 22;
	int PLUS = 23;
	int MINUS = 24;
	int SLASH = 25;
	int AMP = 26;
	int TILDE = 27;
	int STROKE = 28;
	int ASSIGN = 29;
	int SPACES = 30;
	int IDENT = 31;
	int NUMBER = 32;
	int COMMENT = 33;
	int STRING = 34;
	int DIGIT = 35;
	int HEXDIGIT = 36;
	int ORDER = 37;
	int INT = 38;
	int REAL = 39;
	int LETTER = 40;
	int CHAR = 41;
	int LITERAL_MODULE = 42;
	int LITERAL_END = 43;
	int LITERAL_BEGIN = 44;
	int LITERAL_CONST = 45;
	int LITERAL_TYPE = 46;
	int LITERAL_ARRAY = 47;
	int LITERAL_OF = 48;
	int LITERAL_VAR = 49;
	int LITERAL_IS = 50;
	int LITERAL_OR = 51;
	int LITERAL_DIV = 52;
	int LITERAL_MOD = 53;
	int LITERAL_NIL = 54;
	int LITERAL_EXIT = 55;
	int LITERAL_RETURN = 56;
	int LITERAL_IF = 57;
	int LITERAL_THEN = 58;
	int LITERAL_ELSIF = 59;
	int LITERAL_ELSE = 60;
	int LITERAL_WHILE = 61;
	int LITERAL_DO = 62;
	int LITERAL_REPEAT = 63;
	int LITERAL_UNTIL = 64;
	int LITERAL_FOR = 65;
	int LITERAL_TO = 66;
	int LITERAL_BY = 67;
	int LITERAL_LOOP = 68;
	int LITERAL_PROCEDURE = 69;
	int LITERAL_IMPORT = 70;
}
