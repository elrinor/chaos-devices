// $ANTLR : "oberon.g" -> "Oberon2Parser.java"$

package ru.msu.cmc.sp.oberon;

import java.util.ArrayList;
import antlr.TokenStreamRecognitionException;

public interface Oberon2LexerTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int INC = 4;
	int DEC = 5;
	int BREAK = 6;
	int CONTINUE = 7;
	int HALT = 8;
	int ODD = 9;
	int EVEN = 10;
	int ABS = 11;
	int TRUE = 12;
	int FALSE = 13;
	int COMMENT = 14;
	int NEWLINE = 15;
	int WHITESPACE = 16;
	int STAR = 17;
	int DOT = 18;
	int EQUAL = 19;
	int COMMA = 20;
	int SEMICOLON = 21;
	int LPAREN = 22;
	int RPAREN = 23;
	int ASSIGN = 24;
	int COLON = 25;
	int DOTDOT = 26;
	int LBR = 27;
	int RBR = 28;
	int REF = 29;
	int LBRACE = 30;
	int RBRACE = 31;
	int NEQUAL = 32;
	int LEQ = 33;
	int LESS = 34;
	int GEQ = 35;
	int GREATER = 36;
	int PLUS = 37;
	int MINUS = 38;
	int SLASH = 39;
	int AMP = 40;
	int TILDE = 41;
	int STROKE = 42;
	int NUMERIC = 43;
	int INT = 44;
	int FLOAT = 45;
	int CHAR = 46;
	int STRING = 47;
	int IDENT = 48;
	int DIGIT = 49;
	int HEXLETTER = 50;
	int HEXDIGIT = 51;
	int LETTER = 52;
	int LITERAL_MODULE = 53;
	int LITERAL_BEGIN = 54;
	int LITERAL_END = 55;
	int LITERAL_IMPORT = 56;
	int LITERAL_CONST = 57;
	int LITERAL_TYPE = 58;
	int LITERAL_VAR = 59;
	int LITERAL_PROCEDURE = 60;
	int LITERAL_ARRAY = 61;
	int LITERAL_OF = 62;
	int LITERAL_EXIT = 63;
	int LITERAL_RETURN = 64;
	int LITERAL_IF = 65;
	int LITERAL_THEN = 66;
	int LITERAL_ELSIF = 67;
	int LITERAL_ELSE = 68;
	int LITERAL_CASE = 69;
	int LITERAL_WHILE = 70;
	int LITERAL_DO = 71;
	int LITERAL_REPEAT = 72;
	int LITERAL_UNTIL = 73;
	int LITERAL_LOOP = 74;
	int LITERAL_FOR = 75;
	int LITERAL_TO = 76;
	int LITERAL_BY = 77;
	int LITERAL_OR = 78;
	int LITERAL_DIV = 79;
	int LITERAL_MOD = 80;
}
