//======================== ПРИВЕТ =======================\\
Вас приветствует разработчик наирулеzzzzzzzzzzzнейшей гамы DeGeneration Фокин Александр Павлович, также известный как [ArX]Elric!. Если вы решите модифицировать мой проект, то этот ридми поможет вам!


//======================== Запуск =======================\\
В первую строку файла gamefold.txt записать полный путь к исполняющему файлу (кроме самого файла). На конце поставить слэш.
Например: D:/games/rulez/gen/
З.Ы. Сорри за очепятки - писал в Блокноте.

//======================= Исходники =====================\\
// Где лежат
Эта прога имеет свободно распространяемые исходники. Лежат они в подкаталоге source каталога игры. Это следующие файлы:
Gen1_1_6.pas - основной файл проги
Geninfo.pas - файл, содержащий некоторые информационные сообщения
Strtmenu.pas - здесь лежит стартовое меню
Useful.pas - а здесь - некоторые полезные функции (например, перевод integer в string)


//===================== Модификация =====================\\
// Что из себя представляют другие файлы проги
Все нужные файлы, кроме библиотек, лежат в подкаталоге gamedata каталога игры. Это следующие файлы:
alltexts.dat - здесь лежат все текстовые сообщения игры. Программой этот файл не изменяется. Редактируется Far'ом.
hiscores.dat - здесь лежит таблица рекордов. Этот файл динамически изменяется программой. Рекомендую его не редактировать.
loadgame.dat - здесь вы найдете текстовую загрузочную картинку (отключено в последней версии). Редактируется как Far'ом, так и Блокнотом.
sets.dat - это типизированный файл, в котором хранится одна-единственная boolean переменная, отвечающая за отображение курсора в игре.
Далее следуют подкаталоги:
graph/*.* - здесь лежит графический драйвер, библиотека команд для работы с графикой и несколько файлов шрифтов.
saves/chars.dat - это список всех сохраненок. Редактируйте чем хотите (хоть Paint'ом). Если вам приспичило удалить какой-либо сейв, то сначала удалите саму сохраненку, а потом сотрите ее название из этого файла.
saves/*.her - файлы сохраненок. Если вы не читер, то не редактируйте. Если же подобного о себе вы сказать не можете, то смотрите структуру этих файлов ниже.

// Структура других файлов проги
 => alltexts.dat
Этот файл содержит 13 строк + нулевую строку,  в  которой содержится 80 пробелов. Используется она для затирания текстовых сообщений игры. В остальных строках разберетесь сами, скажу только, что все эти строки при загрузке пишутся в массив [0..сколько-то там]of string и потом от туда при необходимости извлекаются.
 => hiscores.dat
этот файл содержит 20 строк - по 2 строки на каждого члена таблицы рекордов. Рекордсмены в нем отсортированы по очкам. Записываются рекорды следующим образом: в 1-ой строке пишется имя, во 2-ой - набранные очки, и так для всех рекордсменов.
 => loadgame.dat
No comments. Откройте и сами все увидете.
 => sets.dat
Все строение описано выше.
 => saves/chars.dat
Здесь записаны названия всех файлов сохраненных игр. Каждое название пишется в своей строке. Названия не отсортированы!
 => saves/*.her
Это, как вы уже поняли, сейвы. Формат такой:
Строка 1. Имя персонажа.
Строка 2. Пол персонажа в цифровом виде (1-мужик, 2-тетенька).
Строка 3. Месяц рождения персонажа. Всего месяцев, как нетрудно догадаться, 12 штук.
Строка 4. Раса персонажа в цифровом виде. Расшифровку смотри в приложении.
Строка 5. Класс персонажа в цифровом виде. Расшифровку смотри в приложении.
Строка 6. Все характеристики персонажа, записанные через пробел в следующей последовательности: str, dex, con, int, wis, cha, lck. Расшифровку аббревиатур смотри в приложении.
Строка 7. Накопленое персонажем золото (привет читерам!).


//======================= Форматы =======================\\
// Форматы файла Gen1_1_6.pas:
 => type levarr=array[1..80,4..23] of shortint
Массив, используется только при начальном создании уровня, потом конвертируется в allevarr. Структура такая же, как и у первого слоя allevarr.
 => type allevarr=array[1..80,4..23,1..3] of shortint
Массив игрового уровня размером 80*19. В слое 1 лежат всё неуничтожимое. Формат такой: 1 - пустое черное место; 2 - пол; 3 - вход в подземелье; 4 - выход из подземелья; 5 - открытая дверь; 6 - закрытая дверь. В слое 2 лежат деньги, причем т.к. тип shortint, то 1-й разряд опускается, и генерится в момент поднятия денег с земли. Например эсли в файле написано 25, то у игрока есть шанс получить 250-259 монет.
 => type alltextarr=array[0..20] of string
Это массив всех текстовых сообщений игры. Заполняется фразами из файла alltexts.dat процедурой inittext
 => type allechoarr=array[0..100] of string
Это массив текущих текстовых сообщений, показанных игроку.
 => type statsarr=array[1..12,1..4] of shortint
Здесь записаны все характеристики. Формат описан ниже (процедура makestats).

// Форматы файла Strtmenu.pas:
type statarr=array[1..7]of integer
Это промежуточно используемый массив (используется при раскидывании характеристик).


//====================== Константы ======================\\
// Константы файла Gen1_1_6.pas:
 => const dlay=10
Множитель для процедуры delay. Рекоммендуется изменять в зависимости от производительности компа.
 => const sfilname='dat'
Расширение ресурсных файлов игры.

// Константы файла Strtmenu.pas:
 => const progversion='v1.16b'
Догадайтесь сами :-P
 => const sexarr:array[1..2] of string[20]=...
    profarr:array[1..16] of string[20]=...
    racearr:array[1..10] of string[20]=...
Это названия всех полов, классов и рас.


//====== Библиотеки комманд и самопальные функции =======\\
// Функции файла Gen1_1_6.pas:
 => procedure makestats(st,dex,con,int,wis,cha,lck:integer;var stats:statsarr)
Пишет все характеристики в массив 12*4. Вычисляет HP, SP, AC, урон дальнего боя, урон ближнего боя. Предполагается, что столбец 1 - это максимально возможные значения, столбец 2 - модификатор параметра (только для строк 1-7, содержащих характеристики перса. Хелп по модификатору можно почитать в руководстве игрока D&D 3ed), столбец 3 - текущее значение параметра (максимально возможное + изменение), столбец 4 - текущее изменение параметра (например, от магшмоток или болезни). Формулы пока не работают, массив почти не используется, в будущем предполагается реорганизация.
 => procedure sysdrawwall(level:levarr;tx,ty:integer)
Процедура использовалась для отладки волнового алгоритма. Выводит на экран текущую карту уровня и ставит крестик в месте с координатами (tx,ty). 
 => function innear(sloi,n,x,y,rad:integer;lev:allevarr):integer
Находит в слое sloi карты уровня lev кол-во элементов, отстоящих от точки с координатами (x,y) на расстояние rad, и равных n.
Используется везде, изменять не рекоммендуется.
 => procedure generate(var level:levarr;var enx,eny:integer)
Процедура генеренья уровня. Возвращает координаты появления игрока на карте - (enx,eny), и сам уровень level в формате levarr. Принцип обьяснять не буду, все равно никто ничего не поймет.
 => procedure genmoney(var level:allevarr)
Разбрасывает по карте деньги.
 => procedure gendoors(var lev:allevarr)
Ставит на карте двери.
 => procedure drawlev(level:allevarr)
Выводит ВИДИМУЮ часть уровня на экран.
 => procedure syscopy(lev:levarr;n:integer)
Конвертирует переменную lev формата levarr в формат allevarr, записывая ее в n-ый слой глобальной переменной игрового уровня.
 => procedure letmeseeit(x,y:integer)
Обсчитывает маску видимости.
 => procedure nullalllevel(var lev:allevarr)
Затирает весь уровень перед генереньем. Сделано для подстраховки от глюков.
 => procedure nullallechos(var echos:allechoarr)
Аналогично предыдущему, но затирает массив текстовых сообщений.
 => procedure inittext
Пишет в массив все возможные текстовые сообщения игры (из файла alltexts.dat)
 => procedure addecho(st:string;var nofecho:integer;typeecho:integer)
Добавляет текстовое сообщение st. Переводит текущее положение просмотра сообщений nofecho к последнему сообщению. typeecho - тип текстового сообщения (0 - не очень важное сообщение, не сохранится в буфере, исчезнет в конце хода, 1 - важное сообщение, сохранится в буфере)
 => procedure writeecho(var n:integer)
Выводит на экран из буфера текстовых сообщений те сообщения, которые находятся за и на положении просмотра сообщений n.
 => function yesnoquest(quest:string;var nofecho:integer):boolean
Задает вопрос quest, переводит положение просмотра текстовых сообщений (за счет вызова процедуры addecho) nofecho на последнее текстовое сообщение (то есть на этот вопрос). Ждет нажатия y/n, возвращает ответ в boolean.
 => procedure directionsel(var dirx,diry,nofecho:integer)
Аналогично предыдущему, только задает всегда один и тот же вопрос - просит выбрать направление. Также переводит положение просмотра текстовых сообщений (за счет вызова процедуры addecho). Возвращает направление в двух переменных. dirx - изменение по x, diry - изменение по y.
 => procedure drawinterface(stats:statsarr;gold:longint)
Выводит в нижнюю строку экрана информацию о здоровье/мане/атаке/защите/золоте. 

// Функции файла Useful.pas:
 => procedure changeint(var ch1,ch2:integer)
Меняет местами две integer переменных.
 => procedure changestr(var ch1,ch2:string)
Меняет местами две string переменных.
 => function  makestr(ch:integer):string
Переводит число ch в строку, которую и возвращает.
 => function  makeint(st:string):integer
Переводит строку st в число, которое и возвращает.
 => procedure curoff(b:boolean)
Если b=false, отключает курсор (b - индикатор включенности курсора).
 => procedure curon(b:boolean)
Включает курсор (интересно, зачем я засобачил сюда b?).

// Функции файла Geninfo.pas:
 => procedure infostat(stat,x,y:integer)
В точке с координатами (x,y) выдает комментарий к характеристике персонажа номер stat. Расшифровку смотри в приложении.

// Функции файла Strtmenu.pas:
procedure startmenu(var st,dex,con,int,wis,cha,lck,race,class,month,day,sex:integer;var gold:longint;var name:string)
Загружает стартовое меню, в котором можно полазить. Разобраться в нем не составит труда.
procedure readok(x,y:integer)
В точке с координатами (x,y) возникает пункт меню "Ok", и курсор, указывающий на этот пункт. Пока не нажмете Enter (то бишь ok), из процедуры не выйдете.
procedure endall(st,dex,con,int,wis,cha,lck,race,class,month,day,sex:integer;gold:longint;name:string)
Показывает экран завершения игры, сохраняет игру, модифицирует таблицу рекордов и выбрасывает вас в стартовое меню.
procedure getdirname(drname,flname:string)
Передает этой бибилиотеке комманд путь к директории игры.
procedure loadingdata(dlay:integer)
Показывает текстовое сообщение при загрузке - "Loading game data...".
procedure splashscreen(dlay:integer)
Показывает загрузочный экран.
procedure initoptions
Открывае файл опций и все что там написано претворяет в жизнь.


//======== Приложение (Расшифровка шифров игры) =========\\
// Пол
1  = Мужчина
2  = Женщина

// Расы
1  = Человек
2  = Гном
3  = Высший Эльф
4  = Темный Эльф
5  = Полурослик
6  = Тролль
7  = Орк
8  = Драконид
9  = Гоблин
10 = Кобольд

// Классы
1  = Воин
2  = Паладин
3  = Рейнджер
4  = Вор
5  = Убийца
6  = Маг
7  = Священник
8  = Бард
9  = Монах
10 = Лучник
11 = Торговец
12 = Фермер
13 = Псионик
14 = Варвар
15 = Друид
16 = Некромант

// Характеристики
1  = str - Сила
2  = dex - Ловкость
3  = con - Выносливость
4  = int - Интеллект
5  = wis - Мудрость
6  = cha - Харизма
7  = lck - Удача

// Месяцы рождения
1  = Дракона
2  = Единорога
3  = Волка
4  = Василиска
5  = Змеи
6  = Грифона
7  = Зайца
8  = Льва
9  = Тигра
10 = Лошади
11 = Ворона
12 = Мыши

// Структура первого слоя массива игрового уровня
1  = пустое черное место
2  = пол
3  = вход в подземелье
4  = выход из подземелья
5  = открытая дверь
6  = закрытая дверь